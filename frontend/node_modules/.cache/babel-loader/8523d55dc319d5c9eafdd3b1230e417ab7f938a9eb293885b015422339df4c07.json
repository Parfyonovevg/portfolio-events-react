{"ast":null,"code":"var _jsxFileName = \"/Users/yevheniiparfonov/Downloads/routing/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defe } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n};\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events' }), {\n    //   status: 500,\n    // });\n\n    throw json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nexport const loader = async () => {};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defe","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/yevheniiparfonov/Downloads/routing/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defe } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nconst EventsPage = () => {\n  const data = useLoaderData();\n\n  const events = data.events;\n\n  return <EventsList events={events} />;\n};\n\nexport default EventsPage;\n\nconst loadEvents = async () => {\n  const response = await fetch('http://localhost:8080/events');\n\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events' }), {\n    //   status: 500,\n    // });\n\n    throw json(\n      {\n        message: 'Could not fetch events',\n      },\n      {\n        status: 500,\n      }\n    );\n  } else {\n    return response;\n  }\n};\n\nexport const loader = async () => {};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,IAAI,QAAQ,kBAAkB;AAE5D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAE5B,MAAMS,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBAAOJ,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC,CAAC;AAACN,EAAA,CANID,UAAU;EAAA,QACDN,aAAa;AAAA;AAAAc,EAAA,GADtBR,UAAU;AAQhB,eAAeA,UAAU;AAEzB,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;;IAEA,MAAMjB,IAAI,CACR;MACEkB,OAAO,EAAE;IACX,CAAC,EACD;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAED,OAAO,MAAMK,MAAM,GAAG,MAAAA,CAAA,KAAY,CAAC,CAAC;AAAC,IAAAP,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}