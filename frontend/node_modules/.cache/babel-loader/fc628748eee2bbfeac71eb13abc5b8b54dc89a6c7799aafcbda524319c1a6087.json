{"ast":null,"code":"var _jsxFileName = \"/Users/yevheniiparfonov/Downloads/routing/frontend/src/pages/NewEvent.js\";\nimport { json, redirect } from 'react-router-dom';\nimport EventForm from '../components/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n};\n_c = NewEventPage;\nexport default NewEventPage;\nexport const action = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    description: data.get('description'),\n    date: data.get('date'),\n    image: data.get('image')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (response.status === 422) {\n    return;\n  }\n  if (!response.ok) {\n    throw json({\n      message: 'Error creating event'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n};\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","redirect","EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","data","formData","eventData","title","get","description","date","image","response","fetch","method","headers","body","JSON","stringify","status","ok","message","$RefreshReg$"],"sources":["/Users/yevheniiparfonov/Downloads/routing/frontend/src/pages/NewEvent.js"],"sourcesContent":["import { json, redirect } from 'react-router-dom';\n\nimport EventForm from '../components/EventForm';\n\nconst NewEventPage = () => {\n  return <EventForm />;\n};\n\nexport default NewEventPage;\n\nexport const action = async ({ request, params }) => {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    description: data.get('description'),\n    date: data.get('date'),\n    image: data.get('image'),\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(eventData),\n  });\n\n  if (response.status===422){\n    return \n  }\n\n  if (!response.ok) {\n    throw json({ message: 'Error creating event' }, { status: 500 });\n  }\n\n  return redirect('/events')\n};\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAEjD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,oBAAOD,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACtB,CAAC;AAACC,EAAA,GAFIL,YAAY;AAIlB,eAAeA,YAAY;AAE3B,OAAO,MAAMM,MAAM,GAAG,MAAAC,IAAA,IAA+B;EAAA,IAAxB;IAAEC,OAAO;IAAEC;EAAO,CAAC,GAAAF,IAAA;EAC9C,MAAMG,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC;EACrC,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,WAAW,EAAEL,IAAI,CAACI,GAAG,CAAC,aAAa,CAAC;IACpCE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,KAAK,EAAEP,IAAI,CAACI,GAAG,CAAC,OAAO;EACzB,CAAC;EACD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAChC,CAAC,CAAC;EAEF,IAAIM,QAAQ,CAACO,MAAM,KAAG,GAAG,EAAC;IACxB;EACF;EAEA,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAM/B,IAAI,CAAC;MAAEgC,OAAO,EAAE;IAAuB,CAAC,EAAE;MAAEF,MAAM,EAAE;IAAI,CAAC,CAAC;EAClE;EAEA,OAAO7B,QAAQ,CAAC,SAAS,CAAC;AAC5B,CAAC;AAAC,IAAAS,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}